<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OS_lab0</title>
      <link href="/2023/03/08/os-lab0-1/"/>
      <url>/2023/03/08/os-lab0-1/</url>
      
        <content type="html"><![CDATA[<h1>OS_lab0</h1><h2 id="OS-lab0实验报告">OS lab0实验报告</h2><h3 id="思考题">思考题</h3><h4 id="Thinking-0-1">Thinking 0.1</h4><hr><p>答：不一样，第三次<code>cat Modified.txt</code>未跟踪的文件还有<code>Modified.txt</code></p><h4 id="Thinking-0-2">Thinking 0.2</h4><p>add the file:</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>stage the file:</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>commit:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Thinking-0-3">Thinking 0.3</h4><p>1.代码文件 print.c 被错误删除时，应当使用什么命令将其恢复？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -- print.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.代码文件 print.c 被错误删除后，执行了 git rm print.c 命令，此时应当使用什么命令将其恢复？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD print.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.无关文件 hello.txt 已经被添加到暂存区时，如何在不删除此文件的前提下将其移出暂存区？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> hello.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Thinking-0-4">Thinking 0.4</h4><p><strong>第一次git log</strong></p><pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">commit a4b048ff4b097ea93d521d5362aa2cb3607c1d4d (HEAD -&gt; master)Author: 周靖宇 &lt;21373405@buaa.edu.cn&gt;Date:   Sun Mar 5 17:48:30 2023 +0800    3commit 8472fe15302c73c61712e22cf2bffaa7dd1ccb0aAuthor: 周靖宇 &lt;21373405@buaa.edu.cn&gt;Date:   Sun Mar 5 17:48:06 2023 +0800    2commit 18bf9bbc2ea75dd8016db056fce7bac3228811b0Author: 周靖宇 &lt;21373405@buaa.edu.cn&gt;Date:   Sun Mar 5 17:47:23 2023 +0800    1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>git reset --hard HEAD^ + git log</strong></p><pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">commit 8472fe15302c73c61712e22cf2bffaa7dd1ccb0a (HEAD -&gt; master)Author: 周靖宇 &lt;21373405@buaa.edu.cn&gt;Date:   Sun Mar 5 17:48:06 2023 +0800    2commit 18bf9bbc2ea75dd8016db056fce7bac3228811b0Author: 周靖宇 &lt;21373405@buaa.edu.cn&gt;Date:   Sun Mar 5 17:47:23 2023 +0800    1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>git reset --hard <hash1></hash1></strong></p><pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">commit 18bf9bbc2ea75dd8016db056fce7bac3228811b0 (HEAD -&gt; master)Author: 周靖宇 &lt;21373405@buaa.edu.cn&gt;Date:   Sun Mar 5 17:47:23 2023 +0800    1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>git reset --hard <hash3></hash3></strong></p><pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">commit a4b048ff4b097ea93d521d5362aa2cb3607c1d4d (HEAD -&gt; master)Author: 周靖宇 &lt;21373405@buaa.edu.cn&gt;Date:   Sun Mar 5 17:48:30 2023 +0800    3commit 8472fe15302c73c61712e22cf2bffaa7dd1ccb0aAuthor: 周靖宇 &lt;21373405@buaa.edu.cn&gt;Date:   Sun Mar 5 17:48:06 2023 +0800    2commit 18bf9bbc2ea75dd8016db056fce7bac3228811b0Author: 周靖宇 &lt;21373405@buaa.edu.cn&gt;Date:   Sun Mar 5 17:47:23 2023 +0800    1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Thinking-0-5">Thinking 0.5</h4><p>界面中</p><pre class="line-numbers language-none"><code class="language-none">first<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>output.txt中</p><pre class="line-numbers language-none"><code class="language-none">thirdforth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Thinking-0-6">Thinking 0.6</h4><blockquote><p>这个我搞错了，学艺不精</p></blockquote><p>运行效果</p><pre class="line-numbers language-none"><code class="language-none">Shell Start...set a = 1set b = 2set c = a+bc = 3save c to ./file1save b to ./file2save a to ./file3save file1 file2 file3 to file4save file4 to ./result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>result的效果</p><pre class="line-numbers language-none"><code class="language-none">1321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>command的效果</p><h4 id="Thinking-0-7">Thinking 0.7</h4><p><strong>command</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'echo Shell Start...'</span> <span class="token operator">&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo set a = 1'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'a=1'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo set b = 2'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'b=2'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo set c = a+b'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'c=$[$a+$b]'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo c = $c'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo save c to ./file1'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo $c&gt;file1'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo save b to ./file2'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo $b&gt;file2'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo save a to ./file3'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo $a&gt;file1'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo save file1 file2 file3 to file4'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'cat file1&gt;file4'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'cat file2&gt;&gt;file4'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'cat file3&gt;&gt;file4'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'echo save file4 to ./result'</span><span class="token operator">&gt;&gt;</span>test<span class="token builtin class-name">echo</span> <span class="token string">'cat file4&gt;&gt;result'</span><span class="token operator">&gt;&gt;</span>test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>test</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> Shell Start<span class="token punctuation">..</span>.<span class="token builtin class-name">echo</span> <span class="token builtin class-name">set</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">set</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">2</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">set</span> c <span class="token operator">=</span> a+b<span class="token assign-left variable">c</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$a</span>+<span class="token variable">$b</span><span class="token punctuation">]</span><span class="token builtin class-name">echo</span> c <span class="token operator">=</span> <span class="token variable">$c</span><span class="token builtin class-name">echo</span> save c to ./file1<span class="token builtin class-name">echo</span> <span class="token variable">$c</span><span class="token operator">&gt;</span>file1<span class="token builtin class-name">echo</span> save b to ./file2<span class="token builtin class-name">echo</span> <span class="token variable">$b</span><span class="token operator">&gt;</span>file2<span class="token builtin class-name">echo</span> save a to ./file3<span class="token builtin class-name">echo</span> <span class="token variable">$a</span><span class="token operator">&gt;</span>file1<span class="token builtin class-name">echo</span> save file1 file2 file3 to file4<span class="token function">cat</span> file<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>file4<span class="token function">cat</span> file<span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span>file4<span class="token function">cat</span> file<span class="token operator"><span class="token file-descriptor important">3</span>&gt;&gt;</span>file4<span class="token builtin class-name">echo</span> save file4 to ./result<span class="token function">cat</span> file<span class="token operator"><span class="token file-descriptor important">4</span>&gt;&gt;</span>result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>result</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span><span class="token number">2</span><span class="token number">1</span><span class="token number">1</span><span class="token number">2</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="难点分析">难点分析</h2><h4 id="Exercise-0-1">Exercise 0.1</h4><p>题目:</p><pre class="line-numbers language-none"><code class="language-none">1、在Lab0 工作区的src 目录中，存在一个名为palindrome.c 的文件，使用刚刚学过的工具打开palindrome.c，使用c 语言实现判断输入整数n(1 ≤ n ≤ 10000) 是否为回文数的程序(输入输出部分已经完成)。通过stdin 每次只输入一个整数n，若这个数字为回文数则输出Y，否则输出N。[注意：正读倒读相同的整数叫回文数]2、在src 目录下，存在一个未补全的Makefile 文件，借助刚刚掌握的Makefile 知识，将其补全，以实现通过make 命令触发src 目录下的palindrome.c 文件的编译链接的功能，生成的可执行文件命名为palindrome。3、在src/sh_test 目录下，有一个file 文件和hello_os.sh 文件。hello_os.sh是一个未完成的脚本文档，请同学们借助shell 编程的知识，将其补完，以实现通过命令bash hello_os.sh AAA BBB，在hello_os.sh 所处的目录新建一个名为BBB 的文件，其内容为AAA 文件的第8、32、128、512、1024 行的内容提取(AAA 文件行数一定超过1024行)。[注意：对于命令bash hello_os.sh AAA BBB，AAA 及BBB 可为任何合法文件的名称，例如bash hello_os.sh file hello_os.c，若已有hello_os.c 文件，则将其原有内容覆盖]4、补全后的palindrome.c、Makefile、hello_os.sh 依次复制到路径dst/palindrome.c,dst/Makefile, dst/sh_test/hello_os.sh [注意：文件名和路径必须与题目要求相同]要求按照要求完成后，最终提交的文件树图示如下|-- dst2 | |-- Makefile3 | |-- palindrome.c4 | `-- sh_test5 | `-- hello_os.sh6 |-- src7 |-- Makefile8 |-- palindrome.c9 `-- sh_test10 |-- file11 `-- hello_os.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>难点分析</p><p>1.较为简单，只需要按照正常的C语言语法即可，算法上也没有什么难度<br>2.较为简单，可以参考pre练习中的make-exercise，核心代码是</p><pre class="line-numbers language-make" data-language="make"><code class="language-make">compiled: palindrome.c    gcc palindrome.c -o palindrome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.难点是参数的传导以及提取特定行数,注意是覆盖文件，故使用<code>&gt;</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">'8p;32p;128p;512p;1024p'</span> <span class="token variable">$1</span> <span class="token operator">&gt;</span> <span class="token variable">$2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.只需要普通的<code>mv</code>和<code>cp</code>命令即可</p><h4 id="Exercise-0-2">Exercise 0.2</h4><p><strong>题目</strong></p><pre class="line-numbers language-none"><code class="language-none">Exercise 0.2 Lab0 第二道练习题包括以下一题，如果你完成且正确，即可获得12 分。1、在Lab0 工作区ray/sh_test1 目录中，含有100 个子目录file1~file100，还存在一个名为changefile.sh 的文件，将其补完，以实现通过命令bash changefile.sh，可以删除该目录内file71~file100 共计30 个子目录，将file41~file70 共计30 个子目录重命名为newfile41~newfile70。[注意：评测时仅检测changefile.sh 的正确性]要求按照要求完成后，最终提交的文件树图示如下(file 下标只显示1~12，newfile下标只显示41~55)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="难点分析-2">难点分析</h5><p>本题最难的部分应该是循环，但是循环的框架已经写好了，只需要往里面填充代码就可以了删除文件的代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token function">file</span><span class="token variable">$a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改名的代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> <span class="token function">file</span><span class="token variable">$a</span> newfile<span class="token variable">$a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>循环的i++</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">let</span> <span class="token assign-left variable">a</span><span class="token operator">=</span>a+1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Exercise-0-3">Exercise 0.3</h4><p>题目</p><pre class="line-numbers language-OS" data-language="OS"><code class="language-OS">1、在Lab0 工作区的ray/sh_test2 目录下，存在一个未补全的search.sh 文件，将其补完，以实现通过命令bash search.sh file int result，可以在当前目录下生成result 文件，内容为file 文件含有int 字符串所在的行数，即若有多行含有int 字符串需要全部输出。[注意：对于命令bash search.sh file int result，file 及result可为任何合法文件名称，int 可为任何合法字符串，若已有result 文件，则将其原有内容覆盖，匹配时大小写不忽略]要求按照要求完成后，result 内显示样式如下(一个答案占一行)：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="难点分析-3">难点分析</h5><p>本题可能是对我来说最的一道题目了，主要是因为我对于<code>sed,awk</code>命令不是很熟悉，在网上查阅了一定的资料之后我使用<code>awk</code>指令做出了这道题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">int</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token function">awk</span> <span class="token string">'/int/{print NR}'</span> <span class="token variable">$1</span> <span class="token operator">&gt;</span> <span class="token variable">$3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Exercise-0-4">Exercise 0.4</h4><p><strong>题目</strong></p><pre class="line-numbers language-none"><code class="language-none">1、在Lab0 工作区的csc/code 目录下，存在fibo.c、main.c，其中fibo.c 有点小问题，还有一个未补全的modify.sh 文件，将其补完，以实现通过命令bash modify.shfibo.c char int，可以将fibo.c 中所有的char 字符串更改为int 字符串。[注意：对于命令bash modify.sh fibo.c char int，fibo.c 可为任何合法文件名，char 及int可以是任何字符串，评测时评测modify.sh 的正确性，而不是检查修改后fibo.c 的正确性]2、Lab0 工作区的csc/code/fibo.c 成功更换字段后(bash modify.sh fibo.c charint)，现已有csc/Makefile 和csc/code/Makefile，补全两个Makefile 文件，要求在csc 目录下通过命令make 可在csc/code 目录中生成fibo.o、main.o，在csc 目录中生成可执行文件fibo，再输入命令make clean 后只删除两个.o 文件。[注意：不能修改fibo.h 和main.c 文件中的内容，提交的文件中fibo.c 必须是修改后正确的fibo.c，可执行文件fibo 作用是输入一个整数n(从stdin 输入n)，可以输出斐波那契数列前n项，每一项之间用空格分开。比如n=5，输出1 1 2 3 5]要求成功使用脚本文件modify.sh 修改fibo.c，实现使用make 命令可以生成.o 文件和可执行文件，再使用命令make clean 可以将.o 文件删除，但保留fibo 和.c 文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="难点分析-4">难点分析</h5><p>第一小问主要是shell脚本关于字符串替换的撰写，核心代码是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">pattern1</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token assign-left variable">pattern2</span><span class="token operator">=</span><span class="token variable">$3</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/<span class="token variable">${pattern1}</span>/<span class="token variable">${pattern2}</span>/g"</span> <span class="token variable">$1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二问的主要任务是撰写blib.c和fibo.c以及Makefile的编写</p><p>客观来讲，论语法难度，两者难度都不大，但是在memcmp等函数编写时应当用<code>unsigned char</code>型变量，同时注意其他类似函数的编写</p><p>而关于Makefile的编写，需要将多个.o文件链接到一起</p><pre class="line-numbers language-make" data-language="make"><code class="language-make">compile: ./code/fibo.c ./code/main.c ./code/Makefile ./include/fibo.h        gcc -c -I ./include ./code/main.c -o ./code/main.o        gcc -c -I ./include ./code/fibo.c -o ./code/fibo.o        gcc ./code/fibo.o ./code/main.o -o fiboclean: ./code/fibo.o ./code/main.o        rm ./code/fibo.o ./code/main.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验体会">实验体会</h3><h4 id="课下lab0">课下lab0</h4><h5 id="不足">不足</h5><p>在完成了Pre的三道练习之后，lab0的课下难度不算太高，但是我对于<code>awk</code>等指令的熟悉程度还是太差了导致进程其实并不快，对于Linux基本指令还是不熟悉</p><h5 id="收获">收获</h5><p>学习到了shell脚本的编写，了解到了C语言编译的过程，对于MIPS的理解也更上一层楼总之还是要多花时间去感受Linux系统以及操作系统的一些逻辑</p><h2 id="课上exam">课上exam</h2><p>这次exam有两道题，分别是Makefile的编写以及shell脚本的基础编写,难度很低，就算不熟悉基本指令看看指导书一小时以内也能写完</p><h3 id="test1">test1</h3><p>Makefile的编写，要求实现通过<code>gcc</code>对<code>test.c</code>文件的编译与执行，还有就是<code>make clean</code>删除可执行文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">compiled: test.cgcc test.c <span class="token parameter variable">-o</span> <span class="token builtin class-name">test</span>run: <span class="token builtin class-name">test</span>./testclean: <span class="token builtin class-name">test</span><span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="test2">test2</h3><p>要求新建一个<code>mydir</code>文件夹，并且对所有人授予读，写，执行的权限，文件的输出，stderr，mv，cp等等这些指令的编写，难度真的低，没什么好说的，唯一值得注意的的是chmod指令，在pre的学习过程中没怎么用过，但是指导书上也都有，查查书就行，还有就是shell脚本中的赋值问题，值得注意。</p><h2 id="课上extra">课上extra</h2><p>课上extra的难度也不大，和exam加起来完全可以一小时二十分钟内写完，主要是对mos日志的某些特定信息的提取删除，主要考察了<code>grep tail diff</code>等指令的常见操作以及对于shell脚本一些基础概念的理解下面是核心代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"WARN|ERROR"</span> <span class="token variable">$1</span> <span class="token operator">&gt;</span> bug.txt<span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-5</span> <span class="token variable">$1</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"<span class="token variable">$3</span>"</span> <span class="token variable">$1</span> <span class="token operator">&gt;</span> <span class="token variable">$3</span>.txt<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token function">diff</span> $1 $3<span class="token variable">)</span></span><span class="token punctuation">)</span><span class="token keyword">then</span><span class="token builtin class-name">echo</span> same<span class="token keyword">else</span><span class="token builtin class-name">echo</span> different<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="上机感受">上机感受</h2><p>就目前来讲，OS也只学了一些<code>Make,Linux,shell</code>的常见操作，复习了MIPS和C语言的一些基础特性，还没有上强度，通过lab0还是容易的，但是切忌掉以轻心，希望可以学好OS，orz</p>]]></content>
      
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS_Pre</title>
      <link href="/2023/02/18/os-pre/"/>
      <url>/2023/02/18/os-pre/</url>
      
        <content type="html"><![CDATA[<h1>OS_Pre</h1><h2 id="Linux基础操作">Linux基础操作</h2><h3 id="命令">命令</h3><p>在命令行界面中，用户通过一行一行命令向操作系统发出指示，从而达到人机交互的目的。在 Linux 操作系统中，命令的一般格式为：命令名 <code>[选项] [参数]</code> …，方括号的意思是可选，意为可以没有，也可以有一个或多个。接下来我们会认识一些常用的命令。</p><h3 id="目录操作">目录操作</h3><pre class="line-numbers language-none"><code class="language-none">cd用法：cd [选项] 目录作用：切换到某个目录（Change Directory）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>/</code> 代表的是根目录，<code>~</code>则是用户目录的简写，对于普通用户而言，用户目录就是<code>/home/用户名</code>，对于root用户，用户目录是<code>/root</code></p><blockquote><p>Tips：在需要键入文件名或目录名时，可以使用 Tab 自动补足全名，当有多种补全方案时双击 Tab 可以显示所有可能选项。你可以试着在屏幕上输入 cd /h 然后按下 Tab ，就会自动补全为 cd /home，如果你输入的是cd /，再按两下 Tab，会显示所有可能的选择，有些像 ls。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">ls用法：ls [选项] [目录]作用：列出目录中的文件。若参数“目录”未给出，则列出当前目录中的文件。选项（常用）：-a              显示隐藏的文件-l              每行只列出一个文件mkdir用法：mkdir [选项] 目录作用：创建一个新目录。pwd用法：pwd [选项]作用：输出当前目录的绝对路径。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件操作">文件操作</h3><pre class="line-numbers language-none"><code class="language-none">touch用法：touch [选项] 文件名作用：当文件存在时更新文件的时间戳，当文件不存在时创建新文件。rm用法：rm [选项] 文件作用：删除文件。选项（常用）：-r              递归删除目录及其内容，删除非空目录必须有此选项，否则无法删除。-f              强制删除，不提示用户确认，忽略不存在的目录。-i              逐一提示用户确认每个将要被删除的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Tips:<code>rm -rf</code> 是十分危险的命令（尤其在 root 用户下），非必要不使用<code>rm -rf</code>命令，在执行之前需要再三确认。root 用户具有至高无上的权限，在该用户下执行<code>rm -rf /</code>可以删除一切文件，包括 Linux 本身，从而导致系统被毁灭。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">cp用法：cp [选项] 源文件 目标路径作用：将源文件（也可以是目录）复制为目标路径对应的文件（如果目标路径是文件）或复制到目标路径（如果目标路径是目录）。选项（常用）：-r              递归复制目录及其子目录内的所有内容。mv用法：mv [选项] 源文件 目标路径作用：将源文件（也可以是目录）移动为目标路径对应的文件（如果目标路径是文件）或移动到目标路径（如果目标路径是目录）。选项（常用）：-r              递归移动目录及其子目录内的所有内容。diff用法：diff [选项] 文件1 文件2选项（常用）：-b              不检查空白字符的不同。-B              不检查空行。-q              仅显示有无差异，不显示详细信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找操作">查找操作</h3><pre class="line-numbers language-none"><code class="language-none">find用法：find [路径] &lt;选项&gt;作用：在给定路径下递归地查找文件，输出符合要求的文件的路径。如果没有给定路径，则在当前目录下查找。选项（常用）：-name &lt;文件名&gt;             指定需要查找的文件名。grep用法：grep [选项] PATTERN FILE（PATTERN是匹配字符串，FILE是文件或目录的路径）作用：输出匹配PATTERN的文件和相关的行。选项（常用）：-a              不忽略二进制数据进行搜索。-i              忽略大小写差异。-r              从目录中递归查找。-n              显示行号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First-blog</title>
      <link href="/2023/02/04/first-blog/"/>
      <url>/2023/02/04/first-blog/</url>
      
        <content type="html"><![CDATA[<p>做个<em>小小</em>的<strong>尝试</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct N{    int a;    struct N* lnext;}List<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>😭 🐳</p><p>$x_1^2 + x_2^2 \geq 2x_1x_2$</p><p>$(x_1^3 + x_2^3)\times(\dfrac{1}{x} +\dfrac{1}{y}) \geq (x_1 + x_2)^2$</p><p>$ \int_1n{x2}dx $</p><p>费时费力，终于搞好了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 尝试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/03/hello-world/"/>
      <url>/2023/02/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
